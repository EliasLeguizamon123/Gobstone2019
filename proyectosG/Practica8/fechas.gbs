type Mes is variant{
    /*
        Proposito: Modelar los meses del año.
    */
    case Enero      {}
    case Febrero    {}
    case Marzo      {}
    case Abril      {}
    case Mayo       {}
    case Junio      {}
    case Julio      {}
    case Agosto     {}
    case Septiembre {}
    case Octubre    {}
    case Noviembre  {}
    case Diciembre  {}
}
type Fecha is record{
    /*
        Proposito: modelar las fechas dentro de un mes.
        Precondicion: 
                      *Si es el mes Enero, Marzo, Mayo, Julio, Agosto, Octubre, Diciembre.
                         Tiene 31 días.
                      *Si el mes es Abril, Junio, Septiembre, Noviembre.
                         Tiene 30 días.
                      *Si es el mes Febrero 
                         Tiene 28 días.
                      *El año es biciesto si es multiplo 4 y no de 100, pero si de 400.
                         Tiene 366 días.
    */
    field dia // Numero.
    field mes // Mes
    field año // Numero.
}
program{
    siguienteFecha(dia <-, mes <-, año <- )
}

function siguienteMes_(mes){
    /*
        Proposito: Describe el mes siguiente a "mes".
        Precondicion: Ninguna.
        Parametro: mes - del tipo mes
        Devuelve: un mes.
    */
    return(matching (mes) select
           Febrero on Enero
           Marzo on Febrero
           Abril on Marzo
           Mayo on Abril
           Junio on Mayo
           Julio on Junio
           Agosto on Julio
           Septiembre on Agosto
           Octubre on Septiembre
           Noviembre on Octubre
           Diciembre on Noviembre
           Enero on Diciembre
          )
}
function siguienteDiaDelMes(dia){
    /*
        Proposito: Describir el siguiente dia del mes de "dia"
        Precondicion: Ninguna.
        Parametro: dia- del tipo dia.
        Devuelve: un dia.
        Observación: el dia debe ser un numero positivo. 
                     en caso de ser los meses Enero, Marzo, Mayo, Julio, Agosto, Octubre, 
                     Diciembre. el ultimo dia del mes es 31.
    */
}
function siguienteFecha(fecha){
    /*
        Parametro: fecha - del tipo fecha
        Debuelve: fecha.
    */
    return(Fecha(
           dia <- diaSiguienteDelDia_Mes_Año_(dia(fecha))
           mes <- mesSiguienteDelDia_Mes_Año_(mes(fecha))
           año <- añoSiguienteDelDia_Mes_Año_(año(fecha))
           )
}
// OBSERVADORAS
function diaSiguienteDelDia_Mes_Año(dia, mes, año){
    return(choose 
           1 when esElUltimoDiaDelMes(dia, mes, año)
           dia + 1 otherwise)
}
function mesSiguienteDelDia_Mes_Año(dia, mes, año){
    return(choose
           siguienteMes_(mes) when (esUltimoDiaDelMes(dia, mes, año))
           mes otherwise
          )
}
function añoSiguienteDelDia_Mes_Año(dia, mes, año){
    return(choose
            
          
          )
}
function esUltimoDiaDelMes(dia, mes, año){
    return(
           esUltimoDiaDelMesDe30(dia, mes, año) ||
           esUltimoDiaDelMesDe31(dia, mes, año) ||
           esUltimoDiaDelMesDeFebrero(dia, mes) ||
           )
}
function esUltimoDiaDelMes30(dia, mes){
    return( 
           dia == 30 &&
           (
               mes == Abril      ||
               mes == Junio      ||
               mes == Septiembre ||
               mes == Noviembre  ||
               )
          )
}
function esUltimoDiaDelMes31(dia, mes){
    return( 
           dia == 30 &&
           (
               mes == Enero      ||
               mes == Marzo      ||
               mes == Mayo       ||
               mes == Julio      ||
               mes == Agosto     ||
               mes == Octubre    ||
               mes == Diciembre  ||
               )
          )
}
function esUltimoDiaDelMesDeFebrero(dia, mes, año){
    return(choose
           (dia == 29 && mes == Febrero) when (esAñoBiciesto())
           (dia == 28 && mes == Febrero) when (not esAñoBiciesto())
           )
}
function esAñoBiciesto()

























